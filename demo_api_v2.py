"""
Demo AdsPower Automation v·ªõi API v2 - T√≠nh nƒÉng m·ªõi
"""
from adspower_api_sync import AdsPowerAPISync
from browser_controller_sync import BrowserControllerSync
from loguru import logger


def demo_api_v2_features():
    """Demo c√°c t√≠nh nƒÉng m·ªõi c·ªßa API v2"""
    logger.info("üöÄ Demo AdsPower Automation API v2")
    
    api = AdsPowerAPISync()
    
    try:
        # L·∫•y danh s√°ch profiles
        logger.info("üìã L·∫•y danh s√°ch profiles...")
        profiles = api.get_profile_list(page=1, page_size=5)
        
        if not profiles.get('data', {}).get('list'):
            logger.warning("‚ö†Ô∏è Kh√¥ng c√≥ profile n√†o. Vui l√≤ng t·∫°o profile trong AdsPower tr∆∞·ªõc.")
            return
        
        profile_id = profiles['data']['list'][0]['user_id']
        logger.info(f"üë§ S·ª≠ d·ª•ng profile: {profile_id}")
        
        # Demo 1: Kh·ªüi ƒë·ªông browser v·ªõi c√°c t√πy ch·ªçn m·ªõi
        logger.info("üîß Demo 1: Kh·ªüi ƒë·ªông browser v·ªõi t√πy ch·ªçn m·ªõi...")
        with BrowserControllerSync(api) as browser:
            browser.connect_to_browser(
                profile_id=profile_id,
                headless=False,  # Hi·ªÉn th·ªã browser
                last_opened_tabs=False,  # Kh√¥ng ti·∫øp t·ª•c tab cu·ªëi
                proxy_detection=True,  # M·ªü trang proxy detection
                password_filling=False,  # Kh√¥ng t·ª± ƒë·ªông ƒëi·ªÅn password
                password_saving=False,  # Kh√¥ng l∆∞u password
                cdp_mask=True,  # Mask CDP detection
                delete_cache=False,  # Kh√¥ng x√≥a cache
                launch_args=[  # Th√™m launch arguments
                    "--window-position=100,100",
                    "--disable-notifications",
                    "--disable-popup-blocking"
                ]
            )
            
            # ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang test
            browser.navigate_to("https://httpbin.org/headers")
            browser.wait_for_load_state("load")
            
            # L·∫•y th√¥ng tin headers
            headers = browser.evaluate_script("""
                () => {
                    const headers = document.querySelector('pre').textContent;
                    return JSON.parse(headers);
                }
            """)
            
            logger.info("üìä Headers t·ª´ browser:")
            for key, value in headers.items():
                logger.info(f"   {key}: {value}")
            
            # Ch·ª•p ·∫£nh m√†n h√¨nh
            browser.take_screenshot("demo_api_v2_headers.png")
            
        # Demo 2: Kh·ªüi ƒë·ªông browser v·ªõi device scale (cho mobile profiles)
        logger.info("üì± Demo 2: Test device scale...")
        with BrowserControllerSync(api) as browser:
            browser.connect_to_browser(
                profile_id=profile_id,
                headless=False,
                device_scale=1.5,  # Zoom 150%
                cdp_mask=True
            )
            
            browser.navigate_to("https://www.google.com")
            browser.wait_for_load_state("load")
            browser.take_screenshot("demo_api_v2_scale.png")
            
        # Demo 3: Test password filling v√† saving
        logger.info("üîê Demo 3: Test password features...")
        with BrowserControllerSync(api) as browser:
            browser.connect_to_browser(
                profile_id=profile_id,
                headless=False,
                password_filling=True,  # B·∫≠t t·ª± ƒë·ªông ƒëi·ªÅn password
                password_saving=True,  # B·∫≠t l∆∞u password
                cdp_mask=True
            )
            
            browser.navigate_to("https://httpbin.org/forms/post")
            browser.wait_for_load_state("load")
            
            # ƒêi·ªÅn form ƒë·ªÉ test password features
            browser.fill_input("input[name='custname']", "Test User")
            browser.fill_input("input[name='custemail']", "test@example.com")
            browser.fill_input("input[name='custtel']", "0123456789")
            
            browser.take_screenshot("demo_api_v2_password.png")
            
        # Demo 4: Test cache deletion
        logger.info("üóëÔ∏è Demo 4: Test cache deletion...")
        with BrowserControllerSync(api) as browser:
            browser.connect_to_browser(
                profile_id=profile_id,
                headless=False,
                delete_cache=True,  # X√≥a cache khi ƒë√≥ng
                cdp_mask=True
            )
            
            browser.navigate_to("https://www.google.com")
            browser.wait_for_load_state("load")
            
            # L∆∞u m·ªôt s·ªë data v√†o localStorage
            browser.set_local_storage("test_key", "test_value")
            browser.set_local_storage("demo_data", "API v2 demo")
            
            local_storage = browser.get_local_storage()
            logger.info(f"üì¶ Local storage tr∆∞·ªõc khi ƒë√≥ng: {local_storage}")
            
            browser.take_screenshot("demo_api_v2_cache.png")
            
        # Demo 5: Test proxy detection
        logger.info("üåê Demo 5: Test proxy detection...")
        with BrowserControllerSync(api) as browser:
            browser.connect_to_browser(
                profile_id=profile_id,
                headless=False,
                proxy_detection=True,  # M·ªü trang proxy detection
                cdp_mask=True
            )
            
            # ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang ki·ªÉm tra IP
            browser.navigate_to("https://httpbin.org/ip")
            browser.wait_for_load_state("load")
            
            ip_info = browser.evaluate_script("""
                () => {
                    const ipData = document.querySelector('pre').textContent;
                    return JSON.parse(ipData);
                }
            """)
            
            logger.info(f"üåç IP Address: {ip_info.get('origin', 'Unknown')}")
            browser.take_screenshot("demo_api_v2_proxy.png")
            
        logger.success("‚úÖ T·∫•t c·∫£ demo API v2 ho√†n th√†nh!")
        logger.info("üì∏ C√°c ·∫£nh ch·ª•p m√†n h√¨nh ƒë√£ ƒë∆∞·ª£c l∆∞u:")
        logger.info("   - demo_api_v2_headers.png")
        logger.info("   - demo_api_v2_scale.png")
        logger.info("   - demo_api_v2_password.png")
        logger.info("   - demo_api_v2_cache.png")
        logger.info("   - demo_api_v2_proxy.png")
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói trong demo API v2: {e}")
    finally:
        api.close()
        logger.info("üîö ƒê√£ ƒë√≥ng k·∫øt n·ªëi API")


def demo_advanced_launch_args():
    """Demo c√°c launch arguments n√¢ng cao"""
    logger.info("üîß Demo Launch Arguments n√¢ng cao")
    
    api = AdsPowerAPISync()
    
    try:
        profiles = api.get_profile_list(page=1, page_size=1)
        if not profiles.get('data', {}).get('list'):
            logger.warning("‚ö†Ô∏è Kh√¥ng c√≥ profile n√†o.")
            return
        
        profile_id = profiles['data']['list'][0]['user_id']
        
        # Launch arguments n√¢ng cao
        advanced_launch_args = [
            "--window-position=200,200",  # V·ªã tr√≠ c·ª≠a s·ªï
            "--window-size=1200,800",     # K√≠ch th∆∞·ªõc c·ª≠a s·ªï
            "--disable-notifications",    # T·∫Øt th√¥ng b√°o
            "--disable-popup-blocking",   # T·∫Øt ch·∫∑n popup
            "--disable-web-security",     # T·∫Øt web security
            "--disable-features=VizDisplayCompositor",  # T·∫Øt m·ªôt s·ªë features
            "--blink-settings=imagesEnabled=false",  # T·∫Øt load h√¨nh ·∫£nh
            "--disable-extensions",       # T·∫Øt extensions
            "--no-sandbox",              # T·∫Øt sandbox
            "--disable-dev-shm-usage"    # T·∫Øt dev shm usage
        ]
        
        with BrowserControllerSync(api) as browser:
            browser.connect_to_browser(
                profile_id=profile_id,
                headless=False,
                launch_args=advanced_launch_args,
                cdp_mask=True
            )
            
            browser.navigate_to("https://www.google.com")
            browser.wait_for_load_state("load")
            
            # Ki·ªÉm tra xem h√¨nh ·∫£nh c√≥ b·ªã t·∫Øt kh√¥ng
            images_disabled = browser.evaluate_script("""
                () => {
                    const images = document.querySelectorAll('img');
                    return images.length === 0;
                }
            """)
            
            logger.info(f"üñºÔ∏è Images disabled: {images_disabled}")
            browser.take_screenshot("demo_advanced_launch_args.png")
            
        logger.success("‚úÖ Demo launch arguments ho√†n th√†nh!")
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói trong demo launch arguments: {e}")
    finally:
        api.close()


if __name__ == "__main__":
    # Ch·∫°y demo ch√≠nh
    demo_api_v2_features()
    
    # Ch·∫°y demo launch arguments
    demo_advanced_launch_args()
